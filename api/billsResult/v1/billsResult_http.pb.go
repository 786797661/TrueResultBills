// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.2

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type BillsResultHTTPServer interface {
	GetTrueResult(context.Context, *GetTrueResultRequest) (*GetTrueResultReply, error)
}

func RegisterBillsResultHTTPServer(s *http.Server, srv BillsResultHTTPServer) {
	r := s.Route("/")
	r.GET("/billsResult", _BillsResult_GetTrueResult0_HTTP_Handler(srv))
}

func _BillsResult_GetTrueResult0_HTTP_Handler(srv BillsResultHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTrueResultRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/billsResult.v1.BillsResult/GetTrueResult")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTrueResult(ctx, req.(*GetTrueResultRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTrueResultReply)
		return ctx.Result(200, reply)
	}
}

type BillsResultHTTPClient interface {
	GetTrueResult(ctx context.Context, req *GetTrueResultRequest, opts ...http.CallOption) (rsp *GetTrueResultReply, err error)
}

type BillsResultHTTPClientImpl struct {
	cc *http.Client
}

func NewBillsResultHTTPClient(client *http.Client) BillsResultHTTPClient {
	return &BillsResultHTTPClientImpl{client}
}

func (c *BillsResultHTTPClientImpl) GetTrueResult(ctx context.Context, in *GetTrueResultRequest, opts ...http.CallOption) (*GetTrueResultReply, error) {
	var out GetTrueResultReply
	pattern := "/billsResult"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/billsResult.v1.BillsResult/GetTrueResult"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
